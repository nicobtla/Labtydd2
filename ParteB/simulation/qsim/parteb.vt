// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2022 00:48:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sumador_completo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sumador_completo_vlg_sample_tst(
	clk,
	in_a,
	in_b,
	in_cin,
	sampler_tx
);
input  clk;
input  in_a;
input  in_b;
input  in_cin;
output sampler_tx;

reg sample;
time current_time;
always @(clk or in_a or in_b or in_cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sumador_completo_vlg_check_tst (
	o_cout,
	o_f,
	sampler_rx
);
input  o_cout;
input  o_f;
input sampler_rx;

reg  o_cout_expected;
reg  o_f_expected;

reg  o_cout_prev;
reg  o_f_prev;

reg  o_cout_expected_prev;
reg  o_f_expected_prev;

reg  last_o_cout_exp;
reg  last_o_f_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_cout_prev = o_cout;
	o_f_prev = o_f;
end

// update expected /o prevs

always @(trigger)
begin
	o_cout_expected_prev = o_cout_expected;
	o_f_expected_prev = o_f_expected;
end



// expected o_cout
initial
begin
	o_cout_expected = 1'bX;
end 

// expected o_f
initial
begin
	o_f_expected = 1'bX;
end 
// generate trigger
always @(o_cout_expected or o_cout or o_f_expected or o_f)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_cout = %b | expected o_f = %b | ",o_cout_expected_prev,o_f_expected_prev);
	$display("| real o_cout = %b | real o_f = %b | ",o_cout_prev,o_f_prev);
`endif
	if (
		( o_cout_expected_prev !== 1'bx ) && ( o_cout_prev !== o_cout_expected_prev )
		&& ((o_cout_expected_prev !== last_o_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_cout_expected_prev);
		$display ("     Real value = %b", o_cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_cout_exp = o_cout_expected_prev;
	end
	if (
		( o_f_expected_prev !== 1'bx ) && ( o_f_prev !== o_f_expected_prev )
		&& ((o_f_expected_prev !== last_o_f_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_f_expected_prev);
		$display ("     Real value = %b", o_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_f_exp = o_f_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sumador_completo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg in_a;
reg in_b;
reg in_cin;
// wires                                               
wire o_cout;
wire o_f;

wire sampler;                             

// assign statements (if any)                          
sumador_completo i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in_a(in_a),
	.in_b(in_b),
	.in_cin(in_cin),
	.o_cout(o_cout),
	.o_f(o_f)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// in_a
always
begin
	in_a = 1'b0;
	in_a = #50000 1'b1;
	#50000;
end 

// in_b
always
begin
	in_b = 1'b0;
	in_b = #100000 1'b1;
	#100000;
end 

// in_cin
initial
begin
	repeat(3)
	begin
		in_cin = 1'b0;
		in_cin = #150000 1'b1;
		# 150000;
	end
	in_cin = 1'b0;
end 

sumador_completo_vlg_sample_tst tb_sample (
	.clk(clk),
	.in_a(in_a),
	.in_b(in_b),
	.in_cin(in_cin),
	.sampler_tx(sampler)
);

sumador_completo_vlg_check_tst tb_out(
	.o_cout(o_cout),
	.o_f(o_f),
	.sampler_rx(sampler)
);
endmodule

